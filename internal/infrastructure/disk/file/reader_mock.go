// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package file

import (
	"sync"
)

var (
	lockreaderMockread sync.RWMutex
)

// Ensure, that readerMock does implement reader.
// If this is not the case, regenerate this file with moq.
var _ reader = &readerMock{}

// readerMock is a mock implementation of reader.
//
//     func TestSomethingThatUsesreader(t *testing.T) {
//
//         // make and configure a mocked reader
//         mockedreader := &readerMock{
//             readFunc: func() ([]byte, error) {
// 	               panic("mock out the read method")
//             },
//         }
//
//         // use mockedreader in code that requires reader
//         // and then make assertions.
//
//     }
type readerMock struct {
	// readFunc mocks the read method.
	readFunc func() ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// read holds details about calls to the read method.
		read []struct {
		}
	}
}

// read calls readFunc.
func (mock *readerMock) read() ([]byte, error) {
	if mock.readFunc == nil {
		panic("readerMock.readFunc: method is nil but reader.read was just called")
	}
	callInfo := struct {
	}{}
	lockreaderMockread.Lock()
	mock.calls.read = append(mock.calls.read, callInfo)
	lockreaderMockread.Unlock()
	return mock.readFunc()
}

// readCalls gets all the calls that were made to read.
// Check the length with:
//     len(mockedreader.readCalls())
func (mock *readerMock) readCalls() []struct {
} {
	var calls []struct {
	}
	lockreaderMockread.RLock()
	calls = mock.calls.read
	lockreaderMockread.RUnlock()
	return calls
}
