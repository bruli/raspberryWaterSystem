// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "encoding/json"
import "fmt"

type ZonesItemResponse struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Relays corresponds to the JSON schema field "relays".
	Relays []int `json:"relays" yaml:"relays" mapstructure:"relays"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ZonesItemResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in ZonesItemResponse: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ZonesItemResponse: required")
	}
	if v, ok := raw["relays"]; !ok || v == nil {
		return fmt.Errorf("field relays in ZonesItemResponse: required")
	}
	type Plain ZonesItemResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ZonesItemResponse(plain)
	return nil
}

type ZonesResponseJson []ZonesItemResponse
