// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "encoding/json"
import "fmt"

type ExecutionTemperatureRequest struct {
	// Seconds corresponds to the JSON schema field "seconds".
	Seconds int `json:"seconds" yaml:"seconds" mapstructure:"seconds"`

	// Zones corresponds to the JSON schema field "zones".
	Zones []string `json:"zones" yaml:"zones" mapstructure:"zones"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExecutionTemperatureRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["seconds"]; !ok || v == nil {
		return fmt.Errorf("field seconds in ExecutionTemperatureRequest: required")
	}
	if v, ok := raw["zones"]; !ok || v == nil {
		return fmt.Errorf("field zones in ExecutionTemperatureRequest: required")
	}
	type Plain ExecutionTemperatureRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExecutionTemperatureRequest(plain)
	return nil
}

type ProgramTemperatureRequest struct {
	// Executions corresponds to the JSON schema field "executions".
	Executions []ExecutionTemperatureRequest `json:"executions" yaml:"executions" mapstructure:"executions"`

	// Hour corresponds to the JSON schema field "hour".
	Hour string `json:"hour" yaml:"hour" mapstructure:"hour"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProgramTemperatureRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["executions"]; !ok || v == nil {
		return fmt.Errorf("field executions in ProgramTemperatureRequest: required")
	}
	if v, ok := raw["hour"]; !ok || v == nil {
		return fmt.Errorf("field hour in ProgramTemperatureRequest: required")
	}
	type Plain ProgramTemperatureRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProgramTemperatureRequest(plain)
	return nil
}

// This schema defines the creation temperature program request
type CreateTemperatureProgramRequestJson struct {
	// Programs corresponds to the JSON schema field "programs".
	Programs []ProgramTemperatureRequest `json:"programs" yaml:"programs" mapstructure:"programs"`

	// Temperature corresponds to the JSON schema field "temperature".
	Temperature float64 `json:"temperature" yaml:"temperature" mapstructure:"temperature"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CreateTemperatureProgramRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["programs"]; !ok || v == nil {
		return fmt.Errorf("field programs in CreateTemperatureProgramRequestJson: required")
	}
	if v, ok := raw["temperature"]; !ok || v == nil {
		return fmt.Errorf("field temperature in CreateTemperatureProgramRequestJson: required")
	}
	type Plain CreateTemperatureProgramRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CreateTemperatureProgramRequestJson(plain)
	return nil
}
