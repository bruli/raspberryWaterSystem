// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "encoding/json"
import "fmt"

type ExecutionWeeklyRequest struct {
	// Seconds corresponds to the JSON schema field "seconds".
	Seconds int `json:"seconds" yaml:"seconds" mapstructure:"seconds"`

	// Zones corresponds to the JSON schema field "zones".
	Zones []string `json:"zones" yaml:"zones" mapstructure:"zones"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExecutionWeeklyRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["seconds"]; !ok || v == nil {
		return fmt.Errorf("field seconds in ExecutionWeeklyRequest: required")
	}
	if v, ok := raw["zones"]; !ok || v == nil {
		return fmt.Errorf("field zones in ExecutionWeeklyRequest: required")
	}
	type Plain ExecutionWeeklyRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExecutionWeeklyRequest(plain)
	return nil
}

type ProgramWeeklyRequest struct {
	// Executions corresponds to the JSON schema field "executions".
	Executions []ExecutionWeeklyRequest `json:"executions" yaml:"executions" mapstructure:"executions"`

	// Hour corresponds to the JSON schema field "hour".
	Hour string `json:"hour" yaml:"hour" mapstructure:"hour"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProgramWeeklyRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["executions"]; !ok || v == nil {
		return fmt.Errorf("field executions in ProgramWeeklyRequest: required")
	}
	if v, ok := raw["hour"]; !ok || v == nil {
		return fmt.Errorf("field hour in ProgramWeeklyRequest: required")
	}
	type Plain ProgramWeeklyRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProgramWeeklyRequest(plain)
	return nil
}

// This schema defines the creation weekly program request
type CreateWeeklyProgramRequestJson struct {
	// Programs corresponds to the JSON schema field "programs".
	Programs []ProgramWeeklyRequest `json:"programs" yaml:"programs" mapstructure:"programs"`

	// WeekDay corresponds to the JSON schema field "week_day".
	WeekDay string `json:"week_day" yaml:"week_day" mapstructure:"week_day"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CreateWeeklyProgramRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["programs"]; !ok || v == nil {
		return fmt.Errorf("field programs in CreateWeeklyProgramRequestJson: required")
	}
	if v, ok := raw["week_day"]; !ok || v == nil {
		return fmt.Errorf("field week_day in CreateWeeklyProgramRequestJson: required")
	}
	type Plain CreateWeeklyProgramRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CreateWeeklyProgramRequestJson(plain)
	return nil
}
