// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "encoding/json"
import "fmt"

type ExecutionRequest struct {
	// Seconds corresponds to the JSON schema field "seconds".
	Seconds int `json:"seconds" yaml:"seconds" mapstructure:"seconds"`

	// Zones corresponds to the JSON schema field "zones".
	Zones []string `json:"zones" yaml:"zones" mapstructure:"zones"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExecutionRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["seconds"]; !ok || v == nil {
		return fmt.Errorf("field seconds in ExecutionRequest: required")
	}
	if v, ok := raw["zones"]; !ok || v == nil {
		return fmt.Errorf("field zones in ExecutionRequest: required")
	}
	type Plain ExecutionRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExecutionRequest(plain)
	return nil
}

// This schema defines the creation program request
type CreateProgramRequestJson struct {
	// Executions corresponds to the JSON schema field "executions".
	Executions []ExecutionRequest `json:"executions" yaml:"executions" mapstructure:"executions"`

	// Hour corresponds to the JSON schema field "hour".
	Hour string `json:"hour" yaml:"hour" mapstructure:"hour"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CreateProgramRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["executions"]; !ok || v == nil {
		return fmt.Errorf("field executions in CreateProgramRequestJson: required")
	}
	if v, ok := raw["hour"]; !ok || v == nil {
		return fmt.Errorf("field hour in CreateProgramRequestJson: required")
	}
	type Plain CreateProgramRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CreateProgramRequestJson(plain)
	return nil
}
