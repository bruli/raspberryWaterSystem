// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "encoding/json"
import "fmt"

type ExecutionLogItemResponse struct {
	// ExecutedAt corresponds to the JSON schema field "executed_at".
	ExecutedAt string `json:"executed_at" yaml:"executed_at" mapstructure:"executed_at"`

	// Seconds corresponds to the JSON schema field "seconds".
	Seconds int `json:"seconds" yaml:"seconds" mapstructure:"seconds"`

	// ZoneName corresponds to the JSON schema field "zone_name".
	ZoneName string `json:"zone_name" yaml:"zone_name" mapstructure:"zone_name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExecutionLogItemResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["executed_at"]; !ok || v == nil {
		return fmt.Errorf("field executed_at in ExecutionLogItemResponse: required")
	}
	if v, ok := raw["seconds"]; !ok || v == nil {
		return fmt.Errorf("field seconds in ExecutionLogItemResponse: required")
	}
	if v, ok := raw["zone_name"]; !ok || v == nil {
		return fmt.Errorf("field zone_name in ExecutionLogItemResponse: required")
	}
	type Plain ExecutionLogItemResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExecutionLogItemResponse(plain)
	return nil
}

// This schema defines the executions log response
type ExecutionLogsResponseJson []ExecutionLogItemResponse
