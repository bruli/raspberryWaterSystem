// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "fmt"
import "encoding/json"

// This schema defines the weather response
type WeatherResponseJson struct {
	// Humidity corresponds to the JSON schema field "humidity".
	Humidity float64 `json:"humidity"`

	// IsRaining corresponds to the JSON schema field "is_raining".
	IsRaining bool `json:"is_raining"`

	// Temperature corresponds to the JSON schema field "temperature".
	Temperature float64 `json:"temperature"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WeatherResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["humidity"]; !ok || v == nil {
		return fmt.Errorf("field humidity: required")
	}
	if v, ok := raw["is_raining"]; !ok || v == nil {
		return fmt.Errorf("field is_raining: required")
	}
	if v, ok := raw["temperature"]; !ok || v == nil {
		return fmt.Errorf("field temperature: required")
	}
	type Plain WeatherResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WeatherResponseJson(plain)
	return nil
}
