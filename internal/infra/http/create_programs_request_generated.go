// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package http

import "fmt"
import "encoding/json"

type ExecutionItemRequest struct {
	// Seconds corresponds to the JSON schema field "seconds".
	Seconds int `json:"seconds"`

	// Zones corresponds to the JSON schema field "zones".
	Zones []string `json:"zones"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExecutionItemRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["seconds"]; !ok || v == nil {
		return fmt.Errorf("field seconds: required")
	}
	if v, ok := raw["zones"]; !ok || v == nil {
		return fmt.Errorf("field zones: required")
	}
	type Plain ExecutionItemRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExecutionItemRequest(plain)
	return nil
}

// This schema defines the creation programs request
type CreateProgramsRequestJson struct {
	// Daily corresponds to the JSON schema field "daily".
	Daily []ProgramItemRequest `json:"daily,omitempty"`

	// Even corresponds to the JSON schema field "even".
	Even []ProgramItemRequest `json:"even,omitempty"`

	// Odd corresponds to the JSON schema field "odd".
	Odd []ProgramItemRequest `json:"odd,omitempty"`

	// Temperature corresponds to the JSON schema field "temperature".
	Temperature []TemperatureItemRequest `json:"temperature,omitempty"`

	// Weekly corresponds to the JSON schema field "weekly".
	Weekly []WeeklyItemRequest `json:"weekly,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProgramItemRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["executions"]; !ok || v == nil {
		return fmt.Errorf("field executions: required")
	}
	if v, ok := raw["hour"]; !ok || v == nil {
		return fmt.Errorf("field hour: required")
	}
	type Plain ProgramItemRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProgramItemRequest(plain)
	return nil
}

type TemperatureItemRequest struct {
	// Programs corresponds to the JSON schema field "programs".
	Programs []ProgramItemRequest `json:"programs"`

	// Temperature corresponds to the JSON schema field "temperature".
	Temperature float64 `json:"temperature"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TemperatureItemRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["programs"]; !ok || v == nil {
		return fmt.Errorf("field programs: required")
	}
	if v, ok := raw["temperature"]; !ok || v == nil {
		return fmt.Errorf("field temperature: required")
	}
	type Plain TemperatureItemRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TemperatureItemRequest(plain)
	return nil
}

type WeeklyItemRequest struct {
	// Programs corresponds to the JSON schema field "programs".
	Programs []ProgramItemRequest `json:"programs"`

	// WeekDay corresponds to the JSON schema field "week_day".
	WeekDay string `json:"week_day"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WeeklyItemRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["programs"]; !ok || v == nil {
		return fmt.Errorf("field programs: required")
	}
	if v, ok := raw["week_day"]; !ok || v == nil {
		return fmt.Errorf("field week_day: required")
	}
	type Plain WeeklyItemRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WeeklyItemRequest(plain)
	return nil
}

type ProgramItemRequest struct {
	// Executions corresponds to the JSON schema field "executions".
	Executions []ExecutionItemRequest `json:"executions"`

	// Hour corresponds to the JSON schema field "hour".
	Hour string `json:"hour"`
}
