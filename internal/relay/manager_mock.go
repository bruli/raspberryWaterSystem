// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package relay

import (
	"sync"
)

var (
	lockManagerMockDeactivatePins sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             DeactivatePinsFunc: func(pins []string) error {
// 	               panic("mock out the DeactivatePins method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// DeactivatePinsFunc mocks the DeactivatePins method.
	DeactivatePinsFunc func(pins []string) error

	// calls tracks calls to the methods.
	calls struct {
		// DeactivatePins holds details about calls to the DeactivatePins method.
		DeactivatePins []struct {
			// Pins is the pins argument value.
			Pins []string
		}
	}
}

// DeactivatePins calls DeactivatePinsFunc.
func (mock *ManagerMock) DeactivatePins(pins []string) error {
	if mock.DeactivatePinsFunc == nil {
		panic("ManagerMock.DeactivatePinsFunc: method is nil but Manager.DeactivatePins was just called")
	}
	callInfo := struct {
		Pins []string
	}{
		Pins: pins,
	}
	lockManagerMockDeactivatePins.Lock()
	mock.calls.DeactivatePins = append(mock.calls.DeactivatePins, callInfo)
	lockManagerMockDeactivatePins.Unlock()
	return mock.DeactivatePinsFunc(pins)
}

// DeactivatePinsCalls gets all the calls that were made to DeactivatePins.
// Check the length with:
//     len(mockedManager.DeactivatePinsCalls())
func (mock *ManagerMock) DeactivatePinsCalls() []struct {
	Pins []string
} {
	var calls []struct {
		Pins []string
	}
	lockManagerMockDeactivatePins.RLock()
	calls = mock.calls.DeactivatePins
	lockManagerMockDeactivatePins.RUnlock()
	return calls
}
