// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package zone

import (
	"sync"
)

var (
	lockRepositoryMockFind     sync.RWMutex
	lockRepositoryMockGetZones sync.RWMutex
	lockRepositoryMockSave     sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             FindFunc: func(id string) *Zone {
// 	               panic("mock out the Find method")
//             },
//             GetZonesFunc: func() *Zones {
// 	               panic("mock out the GetZones method")
//             },
//             SaveFunc: func(z Zones) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(id string) *Zone

	// GetZonesFunc mocks the GetZones method.
	GetZonesFunc func() *Zones

	// SaveFunc mocks the Save method.
	SaveFunc func(z Zones) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// ID is the id argument value.
			ID string
		}
		// GetZones holds details about calls to the GetZones method.
		GetZones []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Z is the z argument value.
			Z Zones
		}
	}
}

// Find calls FindFunc.
func (mock *RepositoryMock) Find(id string) *Zone {
	if mock.FindFunc == nil {
		panic("RepositoryMock.FindFunc: method is nil but Repository.Find was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockRepositoryMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockRepositoryMockFind.Unlock()
	return mock.FindFunc(id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedRepository.FindCalls())
func (mock *RepositoryMock) FindCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockFind.RLock()
	calls = mock.calls.Find
	lockRepositoryMockFind.RUnlock()
	return calls
}

// GetZones calls GetZonesFunc.
func (mock *RepositoryMock) GetZones() *Zones {
	if mock.GetZonesFunc == nil {
		panic("RepositoryMock.GetZonesFunc: method is nil but Repository.GetZones was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGetZones.Lock()
	mock.calls.GetZones = append(mock.calls.GetZones, callInfo)
	lockRepositoryMockGetZones.Unlock()
	return mock.GetZonesFunc()
}

// GetZonesCalls gets all the calls that were made to GetZones.
// Check the length with:
//     len(mockedRepository.GetZonesCalls())
func (mock *RepositoryMock) GetZonesCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGetZones.RLock()
	calls = mock.calls.GetZones
	lockRepositoryMockGetZones.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(z Zones) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Z Zones
	}{
		Z: z,
	}
	lockRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockRepositoryMockSave.Unlock()
	return mock.SaveFunc(z)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	Z Zones
} {
	var calls []struct {
		Z Zones
	}
	lockRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockRepositoryMockSave.RUnlock()
	return calls
}
