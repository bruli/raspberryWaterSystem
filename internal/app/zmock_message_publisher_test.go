// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"context"
	"github.com/bruli/raspberryWaterSystem/internal/app"
	"sync"
)

// Ensure, that MessagePublisherMock does implement app.MessagePublisher.
// If this is not the case, regenerate this file with moq.
var _ app.MessagePublisher = &MessagePublisherMock{}

// MessagePublisherMock is a mock implementation of app.MessagePublisher.
//
//	func TestSomethingThatUsesMessagePublisher(t *testing.T) {
//
//		// make and configure a mocked app.MessagePublisher
//		mockedMessagePublisher := &MessagePublisherMock{
//			PublishFunc: func(ctx context.Context, message string) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedMessagePublisher in code that requires app.MessagePublisher
//		// and then make assertions.
//
//	}
type MessagePublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, message string) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Message is the message argument value.
			Message string
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *MessagePublisherMock) Publish(ctx context.Context, message string) error {
	if mock.PublishFunc == nil {
		panic("MessagePublisherMock.PublishFunc: method is nil but MessagePublisher.Publish was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Message string
	}{
		Ctx:     ctx,
		Message: message,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, message)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedMessagePublisher.PublishCalls())
func (mock *MessagePublisherMock) PublishCalls() []struct {
	Ctx     context.Context
	Message string
} {
	var calls []struct {
		Ctx     context.Context
		Message string
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
