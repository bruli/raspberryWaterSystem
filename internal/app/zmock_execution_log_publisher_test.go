// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"context"
	"github.com/bruli/raspberryWaterSystem/internal/app"
	"github.com/bruli/raspberryWaterSystem/internal/domain/program"
	"sync"
)

// Ensure, that ExecutionLogPublisherMock does implement app.ExecutionLogPublisher.
// If this is not the case, regenerate this file with moq.
var _ app.ExecutionLogPublisher = &ExecutionLogPublisherMock{}

// ExecutionLogPublisherMock is a mock implementation of app.ExecutionLogPublisher.
//
//	func TestSomethingThatUsesExecutionLogPublisher(t *testing.T) {
//
//		// make and configure a mocked app.ExecutionLogPublisher
//		mockedExecutionLogPublisher := &ExecutionLogPublisherMock{
//			PublishFunc: func(ctx context.Context, execLog program.ExecutionLog) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedExecutionLogPublisher in code that requires app.ExecutionLogPublisher
//		// and then make assertions.
//
//	}
type ExecutionLogPublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, execLog program.ExecutionLog) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExecLog is the execLog argument value.
			ExecLog program.ExecutionLog
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *ExecutionLogPublisherMock) Publish(ctx context.Context, execLog program.ExecutionLog) error {
	if mock.PublishFunc == nil {
		panic("ExecutionLogPublisherMock.PublishFunc: method is nil but ExecutionLogPublisher.Publish was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ExecLog program.ExecutionLog
	}{
		Ctx:     ctx,
		ExecLog: execLog,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, execLog)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedExecutionLogPublisher.PublishCalls())
func (mock *ExecutionLogPublisherMock) PublishCalls() []struct {
	Ctx     context.Context
	ExecLog program.ExecutionLog
} {
	var calls []struct {
		Ctx     context.Context
		ExecLog program.ExecutionLog
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
