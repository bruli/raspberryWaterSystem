// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"context"
	"github.com/bruli/raspberryWaterSystem/internal/app"
	"github.com/bruli/raspberryWaterSystem/internal/domain/program"
	"github.com/bruli/raspberryWaterSystem/internal/domain/status"
	"github.com/bruli/raspberryWaterSystem/internal/domain/zone"
	"sync"
)

// Ensure, that ZoneRepositoryMock does implement app.ZoneRepository.
// If this is not the case, regenerate this file with moq.
var _ app.ZoneRepository = &ZoneRepositoryMock{}

// ZoneRepositoryMock is a mock implementation of app.ZoneRepository.
//
// 	func TestSomethingThatUsesZoneRepository(t *testing.T) {
//
// 		// make and configure a mocked app.ZoneRepository
// 		mockedZoneRepository := &ZoneRepositoryMock{
// 			FindByIDFunc: func(ctx context.Context, id string) (zone.Zone, error) {
// 				panic("mock out the FindByID method")
// 			},
// 			SaveFunc: func(ctx context.Context, zo zone.Zone) error {
// 				panic("mock out the Save method")
// 			},
// 			UpdateFunc: func(ctx context.Context, zo zone.Zone) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedZoneRepository in code that requires app.ZoneRepository
// 		// and then make assertions.
//
// 	}
type ZoneRepositoryMock struct {
	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, id string) (zone.Zone, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, zo zone.Zone) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, zo zone.Zone) error

	// calls tracks calls to the methods.
	calls struct {
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zo is the zo argument value.
			Zo zone.Zone
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zo is the zo argument value.
			Zo zone.Zone
		}
	}
	lockFindByID sync.RWMutex
	lockSave     sync.RWMutex
	lockUpdate   sync.RWMutex
}

// FindByID calls FindByIDFunc.
func (mock *ZoneRepositoryMock) FindByID(ctx context.Context, id string) (zone.Zone, error) {
	if mock.FindByIDFunc == nil {
		panic("ZoneRepositoryMock.FindByIDFunc: method is nil but ZoneRepository.FindByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, id)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//     len(mockedZoneRepository.FindByIDCalls())
func (mock *ZoneRepositoryMock) FindByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ZoneRepositoryMock) Save(ctx context.Context, zo zone.Zone) error {
	if mock.SaveFunc == nil {
		panic("ZoneRepositoryMock.SaveFunc: method is nil but ZoneRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Zo  zone.Zone
	}{
		Ctx: ctx,
		Zo:  zo,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, zo)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedZoneRepository.SaveCalls())
func (mock *ZoneRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	Zo  zone.Zone
} {
	var calls []struct {
		Ctx context.Context
		Zo  zone.Zone
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ZoneRepositoryMock) Update(ctx context.Context, zo zone.Zone) error {
	if mock.UpdateFunc == nil {
		panic("ZoneRepositoryMock.UpdateFunc: method is nil but ZoneRepository.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Zo  zone.Zone
	}{
		Ctx: ctx,
		Zo:  zo,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, zo)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedZoneRepository.UpdateCalls())
func (mock *ZoneRepositoryMock) UpdateCalls() []struct {
	Ctx context.Context
	Zo  zone.Zone
} {
	var calls []struct {
		Ctx context.Context
		Zo  zone.Zone
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure, that TemperatureRepositoryMock does implement app.TemperatureRepository.
// If this is not the case, regenerate this file with moq.
var _ app.TemperatureRepository = &TemperatureRepositoryMock{}

// TemperatureRepositoryMock is a mock implementation of app.TemperatureRepository.
//
// 	func TestSomethingThatUsesTemperatureRepository(t *testing.T) {
//
// 		// make and configure a mocked app.TemperatureRepository
// 		mockedTemperatureRepository := &TemperatureRepositoryMock{
// 			FindFunc: func(ctx context.Context) (float32, float32, error) {
// 				panic("mock out the Find method")
// 			},
// 		}
//
// 		// use mockedTemperatureRepository in code that requires app.TemperatureRepository
// 		// and then make assertions.
//
// 	}
type TemperatureRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context) (float32, float32, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockFind sync.RWMutex
}

// Find calls FindFunc.
func (mock *TemperatureRepositoryMock) Find(ctx context.Context) (float32, float32, error) {
	if mock.FindFunc == nil {
		panic("TemperatureRepositoryMock.FindFunc: method is nil but TemperatureRepository.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedTemperatureRepository.FindCalls())
func (mock *TemperatureRepositoryMock) FindCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Ensure, that RainRepositoryMock does implement app.RainRepository.
// If this is not the case, regenerate this file with moq.
var _ app.RainRepository = &RainRepositoryMock{}

// RainRepositoryMock is a mock implementation of app.RainRepository.
//
// 	func TestSomethingThatUsesRainRepository(t *testing.T) {
//
// 		// make and configure a mocked app.RainRepository
// 		mockedRainRepository := &RainRepositoryMock{
// 			FindFunc: func(ctx context.Context) (bool, error) {
// 				panic("mock out the Find method")
// 			},
// 		}
//
// 		// use mockedRainRepository in code that requires app.RainRepository
// 		// and then make assertions.
//
// 	}
type RainRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockFind sync.RWMutex
}

// Find calls FindFunc.
func (mock *RainRepositoryMock) Find(ctx context.Context) (bool, error) {
	if mock.FindFunc == nil {
		panic("RainRepositoryMock.FindFunc: method is nil but RainRepository.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedRainRepository.FindCalls())
func (mock *RainRepositoryMock) FindCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Ensure, that StatusRepositoryMock does implement app.StatusRepository.
// If this is not the case, regenerate this file with moq.
var _ app.StatusRepository = &StatusRepositoryMock{}

// StatusRepositoryMock is a mock implementation of app.StatusRepository.
//
// 	func TestSomethingThatUsesStatusRepository(t *testing.T) {
//
// 		// make and configure a mocked app.StatusRepository
// 		mockedStatusRepository := &StatusRepositoryMock{
// 			FindFunc: func(ctx context.Context) (status.Status, error) {
// 				panic("mock out the Find method")
// 			},
// 			SaveFunc: func(ctx context.Context, st status.Status) error {
// 				panic("mock out the Save method")
// 			},
// 			UpdateFunc: func(ctx context.Context, st status.Status) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedStatusRepository in code that requires app.StatusRepository
// 		// and then make assertions.
//
// 	}
type StatusRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context) (status.Status, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, st status.Status) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, st status.Status) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// St is the st argument value.
			St status.Status
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// St is the st argument value.
			St status.Status
		}
	}
	lockFind   sync.RWMutex
	lockSave   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Find calls FindFunc.
func (mock *StatusRepositoryMock) Find(ctx context.Context) (status.Status, error) {
	if mock.FindFunc == nil {
		panic("StatusRepositoryMock.FindFunc: method is nil but StatusRepository.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedStatusRepository.FindCalls())
func (mock *StatusRepositoryMock) FindCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *StatusRepositoryMock) Save(ctx context.Context, st status.Status) error {
	if mock.SaveFunc == nil {
		panic("StatusRepositoryMock.SaveFunc: method is nil but StatusRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		St  status.Status
	}{
		Ctx: ctx,
		St:  st,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, st)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedStatusRepository.SaveCalls())
func (mock *StatusRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	St  status.Status
} {
	var calls []struct {
		Ctx context.Context
		St  status.Status
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StatusRepositoryMock) Update(ctx context.Context, st status.Status) error {
	if mock.UpdateFunc == nil {
		panic("StatusRepositoryMock.UpdateFunc: method is nil but StatusRepository.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		St  status.Status
	}{
		Ctx: ctx,
		St:  st,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, st)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStatusRepository.UpdateCalls())
func (mock *StatusRepositoryMock) UpdateCalls() []struct {
	Ctx context.Context
	St  status.Status
} {
	var calls []struct {
		Ctx context.Context
		St  status.Status
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure, that DailyProgramRepositoryMock does implement app.DailyProgramRepository.
// If this is not the case, regenerate this file with moq.
var _ app.DailyProgramRepository = &DailyProgramRepositoryMock{}

// DailyProgramRepositoryMock is a mock implementation of app.DailyProgramRepository.
//
// 	func TestSomethingThatUsesDailyProgramRepository(t *testing.T) {
//
// 		// make and configure a mocked app.DailyProgramRepository
// 		mockedDailyProgramRepository := &DailyProgramRepositoryMock{
// 			FindAllFunc: func(ctx context.Context) ([]program.Daily, error) {
// 				panic("mock out the FindAll method")
// 			},
// 			FindByHourFunc: func(ctx context.Context, hour program.Hour) (program.Daily, error) {
// 				panic("mock out the FindByHour method")
// 			},
// 			SaveFunc: func(ctx context.Context, programs []program.Daily) error {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedDailyProgramRepository in code that requires app.DailyProgramRepository
// 		// and then make assertions.
//
// 	}
type DailyProgramRepositoryMock struct {
	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(ctx context.Context) ([]program.Daily, error)

	// FindByHourFunc mocks the FindByHour method.
	FindByHourFunc func(ctx context.Context, hour program.Hour) (program.Daily, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, programs []program.Daily) error

	// calls tracks calls to the methods.
	calls struct {
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// FindByHour holds details about calls to the FindByHour method.
		FindByHour []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hour is the hour argument value.
			Hour program.Hour
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Programs is the programs argument value.
			Programs []program.Daily
		}
	}
	lockFindAll    sync.RWMutex
	lockFindByHour sync.RWMutex
	lockSave       sync.RWMutex
}

// FindAll calls FindAllFunc.
func (mock *DailyProgramRepositoryMock) FindAll(ctx context.Context) ([]program.Daily, error) {
	if mock.FindAllFunc == nil {
		panic("DailyProgramRepositoryMock.FindAllFunc: method is nil but DailyProgramRepository.FindAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	mock.lockFindAll.Unlock()
	return mock.FindAllFunc(ctx)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//     len(mockedDailyProgramRepository.FindAllCalls())
func (mock *DailyProgramRepositoryMock) FindAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFindAll.RLock()
	calls = mock.calls.FindAll
	mock.lockFindAll.RUnlock()
	return calls
}

// FindByHour calls FindByHourFunc.
func (mock *DailyProgramRepositoryMock) FindByHour(ctx context.Context, hour program.Hour) (program.Daily, error) {
	if mock.FindByHourFunc == nil {
		panic("DailyProgramRepositoryMock.FindByHourFunc: method is nil but DailyProgramRepository.FindByHour was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hour program.Hour
	}{
		Ctx:  ctx,
		Hour: hour,
	}
	mock.lockFindByHour.Lock()
	mock.calls.FindByHour = append(mock.calls.FindByHour, callInfo)
	mock.lockFindByHour.Unlock()
	return mock.FindByHourFunc(ctx, hour)
}

// FindByHourCalls gets all the calls that were made to FindByHour.
// Check the length with:
//     len(mockedDailyProgramRepository.FindByHourCalls())
func (mock *DailyProgramRepositoryMock) FindByHourCalls() []struct {
	Ctx  context.Context
	Hour program.Hour
} {
	var calls []struct {
		Ctx  context.Context
		Hour program.Hour
	}
	mock.lockFindByHour.RLock()
	calls = mock.calls.FindByHour
	mock.lockFindByHour.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *DailyProgramRepositoryMock) Save(ctx context.Context, programs []program.Daily) error {
	if mock.SaveFunc == nil {
		panic("DailyProgramRepositoryMock.SaveFunc: method is nil but DailyProgramRepository.Save was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Programs []program.Daily
	}{
		Ctx:      ctx,
		Programs: programs,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, programs)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedDailyProgramRepository.SaveCalls())
func (mock *DailyProgramRepositoryMock) SaveCalls() []struct {
	Ctx      context.Context
	Programs []program.Daily
} {
	var calls []struct {
		Ctx      context.Context
		Programs []program.Daily
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
