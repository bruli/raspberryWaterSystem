// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"context"
	"github.com/bruli/raspberryWaterSystem/internal/app"
	"github.com/bruli/raspberryWaterSystem/internal/domain/zone"
	"sync"
)

// Ensure, that ZoneRepositoryMock does implement app.ZoneRepository.
// If this is not the case, regenerate this file with moq.
var _ app.ZoneRepository = &ZoneRepositoryMock{}

// ZoneRepositoryMock is a mock implementation of app.ZoneRepository.
//
// 	func TestSomethingThatUsesZoneRepository(t *testing.T) {
//
// 		// make and configure a mocked app.ZoneRepository
// 		mockedZoneRepository := &ZoneRepositoryMock{
// 			FindByIDFunc: func(ctx context.Context, id string) (zone.Zone, error) {
// 				panic("mock out the FindByID method")
// 			},
// 			SaveFunc: func(ctx context.Context, zo zone.Zone) error {
// 				panic("mock out the Save method")
// 			},
// 			UpdateFunc: func(ctx context.Context, zo zone.Zone) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedZoneRepository in code that requires app.ZoneRepository
// 		// and then make assertions.
//
// 	}
type ZoneRepositoryMock struct {
	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, id string) (zone.Zone, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, zo zone.Zone) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, zo zone.Zone) error

	// calls tracks calls to the methods.
	calls struct {
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zo is the zo argument value.
			Zo zone.Zone
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zo is the zo argument value.
			Zo zone.Zone
		}
	}
	lockFindByID sync.RWMutex
	lockSave     sync.RWMutex
	lockUpdate   sync.RWMutex
}

// FindByID calls FindByIDFunc.
func (mock *ZoneRepositoryMock) FindByID(ctx context.Context, id string) (zone.Zone, error) {
	if mock.FindByIDFunc == nil {
		panic("ZoneRepositoryMock.FindByIDFunc: method is nil but ZoneRepository.FindByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, id)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//     len(mockedZoneRepository.FindByIDCalls())
func (mock *ZoneRepositoryMock) FindByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ZoneRepositoryMock) Save(ctx context.Context, zo zone.Zone) error {
	if mock.SaveFunc == nil {
		panic("ZoneRepositoryMock.SaveFunc: method is nil but ZoneRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Zo  zone.Zone
	}{
		Ctx: ctx,
		Zo:  zo,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, zo)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedZoneRepository.SaveCalls())
func (mock *ZoneRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	Zo  zone.Zone
} {
	var calls []struct {
		Ctx context.Context
		Zo  zone.Zone
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ZoneRepositoryMock) Update(ctx context.Context, zo zone.Zone) error {
	if mock.UpdateFunc == nil {
		panic("ZoneRepositoryMock.UpdateFunc: method is nil but ZoneRepository.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Zo  zone.Zone
	}{
		Ctx: ctx,
		Zo:  zo,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, zo)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedZoneRepository.UpdateCalls())
func (mock *ZoneRepositoryMock) UpdateCalls() []struct {
	Ctx context.Context
	Zo  zone.Zone
} {
	var calls []struct {
		Ctx context.Context
		Zo  zone.Zone
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
