// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package execution

import (
	"sync"
)

var (
	lockRelayManagerMockActivatePins   sync.RWMutex
	lockRelayManagerMockDeactivatePins sync.RWMutex
)

// Ensure, that RelayManagerMock does implement RelayManager.
// If this is not the case, regenerate this file with moq.
var _ RelayManager = &RelayManagerMock{}

// RelayManagerMock is a mock implementation of RelayManager.
//
//     func TestSomethingThatUsesRelayManager(t *testing.T) {
//
//         // make and configure a mocked RelayManager
//         mockedRelayManager := &RelayManagerMock{
//             ActivatePinsFunc: func(pins []string) error {
// 	               panic("mock out the ActivatePins method")
//             },
//             DeactivatePinsFunc: func(pins []string) error {
// 	               panic("mock out the DeactivatePins method")
//             },
//         }
//
//         // use mockedRelayManager in code that requires RelayManager
//         // and then make assertions.
//
//     }
type RelayManagerMock struct {
	// ActivatePinsFunc mocks the ActivatePins method.
	ActivatePinsFunc func(pins []string) error

	// DeactivatePinsFunc mocks the DeactivatePins method.
	DeactivatePinsFunc func(pins []string) error

	// calls tracks calls to the methods.
	calls struct {
		// ActivatePins holds details about calls to the ActivatePins method.
		ActivatePins []struct {
			// Pins is the pins argument value.
			Pins []string
		}
		// DeactivatePins holds details about calls to the DeactivatePins method.
		DeactivatePins []struct {
			// Pins is the pins argument value.
			Pins []string
		}
	}
}

// ActivatePins calls ActivatePinsFunc.
func (mock *RelayManagerMock) ActivatePins(pins []string) error {
	if mock.ActivatePinsFunc == nil {
		panic("RelayManagerMock.ActivatePinsFunc: method is nil but RelayManager.ActivatePins was just called")
	}
	callInfo := struct {
		Pins []string
	}{
		Pins: pins,
	}
	lockRelayManagerMockActivatePins.Lock()
	mock.calls.ActivatePins = append(mock.calls.ActivatePins, callInfo)
	lockRelayManagerMockActivatePins.Unlock()
	return mock.ActivatePinsFunc(pins)
}

// ActivatePinsCalls gets all the calls that were made to ActivatePins.
// Check the length with:
//     len(mockedRelayManager.ActivatePinsCalls())
func (mock *RelayManagerMock) ActivatePinsCalls() []struct {
	Pins []string
} {
	var calls []struct {
		Pins []string
	}
	lockRelayManagerMockActivatePins.RLock()
	calls = mock.calls.ActivatePins
	lockRelayManagerMockActivatePins.RUnlock()
	return calls
}

// DeactivatePins calls DeactivatePinsFunc.
func (mock *RelayManagerMock) DeactivatePins(pins []string) error {
	if mock.DeactivatePinsFunc == nil {
		panic("RelayManagerMock.DeactivatePinsFunc: method is nil but RelayManager.DeactivatePins was just called")
	}
	callInfo := struct {
		Pins []string
	}{
		Pins: pins,
	}
	lockRelayManagerMockDeactivatePins.Lock()
	mock.calls.DeactivatePins = append(mock.calls.DeactivatePins, callInfo)
	lockRelayManagerMockDeactivatePins.Unlock()
	return mock.DeactivatePinsFunc(pins)
}

// DeactivatePinsCalls gets all the calls that were made to DeactivatePins.
// Check the length with:
//     len(mockedRelayManager.DeactivatePinsCalls())
func (mock *RelayManagerMock) DeactivatePinsCalls() []struct {
	Pins []string
} {
	var calls []struct {
		Pins []string
	}
	lockRelayManagerMockDeactivatePins.RLock()
	calls = mock.calls.DeactivatePins
	lockRelayManagerMockDeactivatePins.RUnlock()
	return calls
}
