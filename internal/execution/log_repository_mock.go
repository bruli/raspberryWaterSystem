// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package execution

import (
	"sync"
)

var (
	lockLogRepositoryMockGet  sync.RWMutex
	lockLogRepositoryMockSave sync.RWMutex
)

// Ensure, that LogRepositoryMock does implement LogRepository.
// If this is not the case, regenerate this file with moq.
var _ LogRepository = &LogRepositoryMock{}

// LogRepositoryMock is a mock implementation of LogRepository.
//
//     func TestSomethingThatUsesLogRepository(t *testing.T) {
//
//         // make and configure a mocked LogRepository
//         mockedLogRepository := &LogRepositoryMock{
//             GetFunc: func() (*Logs, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(l Log) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedLogRepository in code that requires LogRepository
//         // and then make assertions.
//
//     }
type LogRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func() (*Logs, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(l Log) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// L is the l argument value.
			L Log
		}
	}
}

// Get calls GetFunc.
func (mock *LogRepositoryMock) Get() (*Logs, error) {
	if mock.GetFunc == nil {
		panic("LogRepositoryMock.GetFunc: method is nil but LogRepository.Get was just called")
	}
	callInfo := struct {
	}{}
	lockLogRepositoryMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockLogRepositoryMockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedLogRepository.GetCalls())
func (mock *LogRepositoryMock) GetCalls() []struct {
} {
	var calls []struct {
	}
	lockLogRepositoryMockGet.RLock()
	calls = mock.calls.Get
	lockLogRepositoryMockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *LogRepositoryMock) Save(l Log) error {
	if mock.SaveFunc == nil {
		panic("LogRepositoryMock.SaveFunc: method is nil but LogRepository.Save was just called")
	}
	callInfo := struct {
		L Log
	}{
		L: l,
	}
	lockLogRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockLogRepositoryMockSave.Unlock()
	return mock.SaveFunc(l)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedLogRepository.SaveCalls())
func (mock *LogRepositoryMock) SaveCalls() []struct {
	L Log
} {
	var calls []struct {
		L Log
	}
	lockLogRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockLogRepositoryMockSave.RUnlock()
	return calls
}
