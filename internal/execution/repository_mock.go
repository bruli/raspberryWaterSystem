// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package execution

import (
	"sync"
)

var (
	lockRepositoryMockGetExecutions sync.RWMutex
	lockRepositoryMockSave          sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetExecutionsFunc: func() (*Execution, error) {
// 	               panic("mock out the GetExecutions method")
//             },
//             SaveFunc: func(e Execution) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetExecutionsFunc mocks the GetExecutions method.
	GetExecutionsFunc func() (*Execution, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(e Execution) error

	// calls tracks calls to the methods.
	calls struct {
		// GetExecutions holds details about calls to the GetExecutions method.
		GetExecutions []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// E is the e argument value.
			E Execution
		}
	}
}

// GetExecutions calls GetExecutionsFunc.
func (mock *RepositoryMock) GetExecutions() (*Execution, error) {
	if mock.GetExecutionsFunc == nil {
		panic("RepositoryMock.GetExecutionsFunc: method is nil but Repository.GetExecutions was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGetExecutions.Lock()
	mock.calls.GetExecutions = append(mock.calls.GetExecutions, callInfo)
	lockRepositoryMockGetExecutions.Unlock()
	return mock.GetExecutionsFunc()
}

// GetExecutionsCalls gets all the calls that were made to GetExecutions.
// Check the length with:
//     len(mockedRepository.GetExecutionsCalls())
func (mock *RepositoryMock) GetExecutionsCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGetExecutions.RLock()
	calls = mock.calls.GetExecutions
	lockRepositoryMockGetExecutions.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(e Execution) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		E Execution
	}{
		E: e,
	}
	lockRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockRepositoryMockSave.Unlock()
	return mock.SaveFunc(e)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	E Execution
} {
	var calls []struct {
		E Execution
	}
	lockRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockRepositoryMockSave.RUnlock()
	return calls
}
