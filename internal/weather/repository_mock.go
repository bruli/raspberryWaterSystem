// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package weather

import (
	"sync"
)

var (
	lockRepositoryMockRead sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             ReadFunc: func() (float32, float32, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func() (float32, float32, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
		}
	}
}

// Read calls ReadFunc.
func (mock *RepositoryMock) Read() (float32, float32, error) {
	if mock.ReadFunc == nil {
		panic("RepositoryMock.ReadFunc: method is nil but Repository.Get was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockRepositoryMockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedRepository.ReadCalls())
func (mock *RepositoryMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockRead.RLock()
	calls = mock.calls.Read
	lockRepositoryMockRead.RUnlock()
	return calls
}
