// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package weather

import (
	"sync"
)

var (
	lockWriteRepositoryMockWrite sync.RWMutex
)

// Ensure, that WriteRepositoryMock does implement WriteRepository.
// If this is not the case, regenerate this file with moq.
var _ WriteRepository = &WriteRepositoryMock{}

// WriteRepositoryMock is a mock implementation of WriteRepository.
//
//     func TestSomethingThatUsesWriteRepository(t *testing.T) {
//
//         // make and configure a mocked WriteRepository
//         mockedWriteRepository := &WriteRepositoryMock{
//             WriteFunc: func(temp float32, hum float32) error {
// 	               panic("mock out the Write method")
//             },
//         }
//
//         // use mockedWriteRepository in code that requires WriteRepository
//         // and then make assertions.
//
//     }
type WriteRepositoryMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(temp float32, hum float32) error

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// Temp is the temp argument value.
			Temp float32
			// Hum is the hum argument value.
			Hum float32
		}
	}
}

// Write calls WriteFunc.
func (mock *WriteRepositoryMock) Write(temp float32, hum float32) error {
	if mock.WriteFunc == nil {
		panic("WriteRepositoryMock.WriteFunc: method is nil but WriteRepository.Write was just called")
	}
	callInfo := struct {
		Temp float32
		Hum  float32
	}{
		Temp: temp,
		Hum:  hum,
	}
	lockWriteRepositoryMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockWriteRepositoryMockWrite.Unlock()
	return mock.WriteFunc(temp, hum)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedWriteRepository.WriteCalls())
func (mock *WriteRepositoryMock) WriteCalls() []struct {
	Temp float32
	Hum  float32
} {
	var calls []struct {
		Temp float32
		Hum  float32
	}
	lockWriteRepositoryMockWrite.RLock()
	calls = mock.calls.Write
	lockWriteRepositoryMockWrite.RUnlock()
	return calls
}
