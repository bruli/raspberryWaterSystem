// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rain

import (
	"sync"
)

var (
	lockRepositoryMockGet sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetFunc: func() (Rain, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func() (Rain, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
	}
}

// Get calls GetFunc.
func (mock *RepositoryMock) Get() (Rain, error) {
	if mock.GetFunc == nil {
		panic("RepositoryMock.GetFunc: method is nil but Repository.Get was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRepositoryMockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRepository.GetCalls())
func (mock *RepositoryMock) GetCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGet.RLock()
	calls = mock.calls.Get
	lockRepositoryMockGet.RUnlock()
	return calls
}
